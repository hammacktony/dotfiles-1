set nocompatible              " be iMproved
" Spacebar is a much better leader than \ or ,
let mapleader = "\<Space>"

""""" PLUGINS """""
call plug#begin()
Plug 'ctrlpvim/ctrlp.vim'
" Go to symbol
Plug 'ctrlpvim/ctrlp.vim' " Fuzzy-matching go-to file
" Make ctrlp faster
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
if executable('ag')
  Plug 'rking/ag.vim'
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  nnoremap <leader>f :Ag<space>
  " Search for term under the cursor
  nmap <leader>F :Ag <c-r>=expand("<cword>")<cr>
endif
map <leader>s :CtrlPBufTag<CR>
Plug 'ervandew/supertab'

Plug 'scrooloose/nerdtree'
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>D :NERDTreeFind<CR>

" Colors
Plug 'sloria/vim-hybrid'  " hybrid with easier-to-read line numbers

" Buffers
Plug 'ap/vim-buftabline'
Plug 'moll/vim-bbye'
nnoremap X :Bdelete<CR>

Plug 'tpope/vim-commentary'
" Toggle comment with space-/
nmap <leader>/ <Plug>CommentaryLine
vmap <leader>/ <Plug>Commentary
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" Sensible defaults
Plug 'tpope/vim-sensible'
Plug 'rstacruz/vim-opinion'

" Load plugins
call plug#end()            " required
filetype plugin indent on    " required

""" end plugins """

""" BASE CUSTOMIZATIONS """
" NOTE: Many base customzations come from vim-sensible and vim-opinion
set encoding=utf-8
set relativenumber
set autoindent
set autoread " reload files when changed on disk, i.e. via `git checkout`
set clipboard=unnamed " Make "yanks" work with system clipboard
set wildmenu wildmode=longest,list,full

" Indents
set expandtab " expand tabs by default (overloadable per file type later)
set tabstop=4 softtabstop=4 shiftwidth=4
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'

" No bells
set noerrorbells visualbell t_vb=
""" VISUAL SETTINGS """

set t_Co=256 " Must be 256 for many themes to display correctly
if &term =~ '256color' | set t_ut= | endif
" Favorites: hybrid iceberg jellybeans Tomorrow hybrid-light
silent! colorscheme hybrid-sl

" Show trailing whitespace
set list listchars=tab:▸\ ,trail:▫

" Check is necessary because breakindent isn't yet available on MacVim =(
if exists('&breakindent') | set breakindent showbreak=.. | endif

set cursorline  " have a line indicate cursor location
set previewheight=25  " Larger preview height

" Set minimum window size to 79x5.
set winwidth=79 winheight=5 winminheight=5

" Patterns for expand(), ctrlp, etc. to ignore
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*.swp,*~,._*,*.pyc,*__pycache__*
if exists('$TMUX') " Support resizing in tmux
  set ttymouse=xterm2
endif

" Persistent undo (can use undos after exiting and restarting
if exists("+undofile")
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo// undodir+=~/.vim/undo// undofile
endif

" Change cursor style when entering INSERT mode (works in tmux!)
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""" SHORTCUTS """
" Quickly edit vimrc
nmap <leader>, :e $MYVIMRC<CR>
" Reload vimrc
noremap <silent> <leader>V :source $MYVIMRC<cr>
" Smash escape
inoremap jk <Esc>
" Search and replace, using : as a separator instead of /
noremap <leader>sr :%s:::cg<Left><Left><Left><Left>
noremap <leader>sR :%s:::g<Left><Left><Left>
" Switch between files
nnoremap <leader>b :e#<CR>
" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" Move across buffers with arrow keys
nnoremap <silent> <Right> :bnext<CR>
nnoremap <silent> <Left> :bprev<CR>
" Remove trailing whitespace on <space><space>w
nnoremap <leader><leader>w :%s/\s\+$//<cr>:let @/=''<CR>
set pastetoggle=<leader>z  " toggle paste mode
" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %
" select last pasted text
nnoremap gp `[v`]
" Easy syntax switching
nnoremap <leader>Tp :set ft=python<CR>
nnoremap <leader>Tj :set ft=javascript<CR>
nnoremap <leader>Tr :set ft=rst<CR>
" Quickly write/quit
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
" Quickly open netrw
nnoremap <leader>e :e.<CR>
" Unhighlight search
nnoremap <Leader>n :nohlsearch<CR><C-L>
" Quick split
nnoremap <Leader>v <C-w>v<C-w>w
" Quick select whole file
map <leader>a ggVG
" Make D delete to end of line
nnoremap D d$
" Make Y yank to end of line
nnoremap Y y$
" Go to beginning/end of line
noremap <leader>h ^
noremap <leader>l $
" Execute macro
nnoremap Q @q
" Move vertically over wrapped lines
nmap j gj
nmap k gk
"" Tabs
nnoremap <silent> tt :tabnew<CR>

augroup configgroup
  autocmd!
  " Make sure Vim returns to the same line when you reopen a file.
  autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") | execute 'normal! g`"zvzz' | endif

  """ Languages
  " rst
  autocmd BufNewFile,BufRead *.txt setlocal ft=rst
  autocmd FileType rst setlocal wrap nolist expandtab lbr shiftwidth=4 tabstop=4 softtabstop=4
  \ formatoptions+=nqtl
  " markdown
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown setlocal wrap nolist expandtab lbr shiftwidth=4 tabstop=4 softtabstop=4
  \ formatoptions+=nqtl
  " yaml
  autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
  " vim
  autocmd FileType vim setlocal shiftwidth=2 tabstop=2 softtabstop=2
  " javascript
  autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4
  " commit messages
  autocmd Filetype gitcommit setlocal nolist textwidth=72
augroup END

" GUI settings, e.g. MacVim
set guifont=Ubuntu\ Mono:h14
if has('gui_running')
  set transparency=5
  " Hide scrollbars
  set guioptions-=Tr guioptions-=r go-=L
endif
